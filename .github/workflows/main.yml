# .github/workflows/build.yml

name: Build C++ Project

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: 'latest'

    # === MODIFIED STEP ===
    # Corrected the Platform parameter from Win32 to x86.
    - name: Build Solution
      run: |
        echo "[INFO] Starting MSBuild for DX9-Cheat-Base.sln with Platform=x86"
        # Execute MSBuild on the solution file.
        # -p:Platform=x86         -> CORRECTED: Use x86 for the 32-bit platform.
        msbuild.exe "DX9-Cheat-Base.sln" -p:Configuration=Release -p:Platform=x86
        echo "[SUCCESS] MSBuild finished."

    # === MODIFIED STEP ===
    # Adjusted the path to match the new platform output directory.
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: COD4-Cheat-Release-DLL
        # The path is likely under an 'x86' folder now.
        path: x86/Release/DX9-Cheat-Base.dll```

### 5. R - Report & Refine

*   **Annotation of "Why":**
    *   I changed the `Platform` parameter in the `msbuild` command from `Win32` to `x86`. The error `MSB4126` explicitly told us that the combination `Release|Win32` was invalid. `x86` is the other standard identifier for 32-bit builds and is the correct one for this project.
    *   I also updated the artifact `path` from `Release/DX9-Cheat-Base.dll` to `x86/Release/DX9-Cheat-Base.dll`. Visual Studio typically creates output folders that match the `Platform` and `Configuration` names, so this change makes the path consistent with our build command.

*   **Confidence Level:** Very High. The change directly addresses the specific error message provided.

*   **Refinement Loop:** Please update your `.github/workflows/build.yml` with this new content and run it again.
    *   **If it fails again,** please provide the new error log. The next most likely issue would be the output path for the artifact, which we can easily correct by inspecting the build log.
    *   **If it succeeds,** you will find a `COD4-Cheat-Release-DLL` artifact available for download on the summary page of your GitHub Actions run.
