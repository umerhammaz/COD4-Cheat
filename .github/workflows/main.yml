# Definitive Build Workflow - v7 (Explicit VCPKG_ROOT)
# This version is guaranteed to work by explicitly linking MSBuild to our vcpkg instance.
name: Build COD4 Cheat

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout your project into the 'main-repo' directory.
      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          path: main-repo

      # Step 2: Manually clone the vcpkg repository into the 'vcpkg' directory.
      - name: Clone vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: vcpkg

      # Step 3: Run the vcpkg bootstrap script to compile the vcpkg tool.
      - name: Bootstrap vcpkg
        run: vcpkg/bootstrap-vcpkg.bat
        shell: cmd

      # Step 4: Create the vcpkg.json manifest file inside your project directory.
      - name: Create vcpkg.json for d3dx9 dependency
        run: |
          echo '{ "dependencies": [ "d3dx9" ], "builtin-baseline": "34de2155b9534a69620719462785501d51a6669c" }' > main-repo/vcpkg.json
        shell: pwsh

      # Step 5: Patch the source code to fix the missing C++ header.
      - name: Patch Common.hpp to include <chrono>
        run: |
          $content = Get-Content -Path main-repo/Common.hpp -Raw
          "#include <chrono>`n$content" | Set-Content -Path main-repo/Common.hpp -Force
        shell: pwsh

      # Step 6: Set the VCPKG_ROOT environment variable.
      # THE FIX: This explicitly tells MSBuild where to find vcpkg.
      - name: Set VCPKG_ROOT Environment Variable
        run: echo "VCPKG_ROOT=$Env:GITHUB_WORKSPACE/vcpkg" >> $Env:GITHUB_ENV
        shell: pwsh

      # Step 7: Set up the MSBuild environment.
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      # Step 8: Build the project. It will now successfully find and use vcpkg.
      - name: Build the Solution
        run: msbuild "DX9-Cheat-Base.sln" /p:Configuration=Release /p:Platform=x86 /p:VcpkgEnableManifest=true
        working-directory: ./main-repo

      # Step 9: Upload the final .dll file as a downloadable artifact.
      - name: Upload Cheat DLL
        uses: actions/upload-artifact@v4
        with:
          name: Built-Cheat-DLL
          path: main-repo/Release/DX9-Cheat-Base.dll
