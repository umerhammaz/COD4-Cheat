# .github/workflows/build.yml

name: Build C++ Project

# Controls when the action will run. 
# Triggers the workflow on push or pull request events but only for the "main" branch.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    steps:
    # Step 1: Check out the repository code so the runner can access it
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        # The repository contains submodules (MinHook), so we need to fetch them too.
        submodules: 'recursive'

    # Step 2: Set up MSBuild environment
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        # Specifies the Visual Studio version. 
        # The README calls for VS 2022, so 'latest' is appropriate.
        vs-version: 'latest'

    # Step 3: Build the Visual Studio solution
    - name: Build Solution
      run: |
        echo "[INFO] Starting MSBuild for DX9-Cheat-Base.sln"
        # Execute MSBuild on the solution file.
        # -p:Configuration=Release -> Builds the Release version.
        # -p:Platform=Win32       -> Builds for the 32-bit (x86) platform. Change to x64 if needed.
        msbuild.exe "DX9-Cheat-Base.sln" -p:Configuration=Release -p:Platform=Win32
        echo "[SUCCESS] MSBuild finished."

    # Step 4: Upload the compiled binary as a workflow artifact
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        # The name of the artifact as it will appear in the GitHub UI.
        name: COD4-Cheat-Release-DLL
        # The path to the file(s) to upload.
        # This path might need adjustment if the project settings are different.
        # It's typically located in `Release/` or `x86/Release/`.
        path: Release/DX9-Cheat-Base.dll
