# Definitive Build Workflow - v14 (Direct Toolchain Injection)
# This workflow succeeds by using the CL and _LINK_ environment variables
# to force the compiler and linker to use the correct paths. This is the
# most fundamental and reliable method.
name: Build COD4 Cheat

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout your project into a sub-directory.
      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          path: main-repo

      # Step 2: Manually clone the vcpkg repository.
      - name: Clone vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: vcpkg

      # Step 3: Run the vcpkg bootstrap script to build the tool.
      - name: Bootstrap vcpkg
        run: vcpkg\bootstrap-vcpkg.bat
        shell: cmd

      # Step 4: Use vcpkg to install the correct DirectX SDK package.
      - name: Install dxsdk-d3dx via vcpkg
        run: vcpkg\vcpkg.exe install dxsdk-d3dx:x86-windows
        shell: cmd

      # Step 5: Patch the source code to fix the missing C++ header.
      - name: Patch Common.hpp to include <chrono>
        run: |
          $content = Get-Content -Path main-repo/Common.hpp -Raw
          "#include <chrono>`n$content" | Set-Content -Path main-repo/Common.hpp -Force
        shell: pwsh

      # Step 6: Set up the base MSBuild environment.
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      # Step 7: Inject paths directly into the C++ compiler and linker toolchain.
      # THE FINAL FIX: We set the CL and _LINK_ env vars that the tools *must* obey.
      - name: Set CL and _LINK_ Environment Variables
        run: |
          $IncludePath = "$Env:GITHUB_WORKSPACE\vcpkg\installed\x86-windows\include"
          $LibPath = "$Env:GITHUB_WORKSPACE\vcpkg\installed\x86-windows\lib"
          echo "CL=/I`"$IncludePath`"" >> $Env:GITHUB_ENV
          echo "_LINK_=/LIBPATH:`"$LibPath`"" >> $Env:GITHUB_ENV
        shell: pwsh

      # Step 8: Build the project. The toolchain is now forced to find our files.
      - name: Build the Solution
        run: msbuild "DX9-Cheat-Base.sln" /p:Configuration=Release /p:Platform=x86
        working-directory: ./main-repo

      # Step 9: Upload the final .dll file.
      - name: Upload Cheat DLL
        uses: actions/upload-artifact@v4
        with:
          name: Built-Cheat-DLL
          path: main-repo/Release/DX9-Cheat-Base.dll
